#!/bin/bash

# Script de test pour l'API des activit√©s r√©centes
BASE_URL="http://localhost:8080/api"
ACTIVITIES_URL="$BASE_URL/activities"

echo "=== Test de l'API des activit√©s r√©centes ==="
echo "URL de base: $ACTIVITIES_URL"
echo

# Fonction pour tester un endpoint
test_endpoint() {
    local endpoint="$1"
    local description="$2"
    
    echo "üîç Test: $description"
    echo "   Endpoint: $endpoint"
    
    response=$(curl -s -w "\n%{http_code}" "$endpoint" 2>/dev/null)
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    if [ "$http_code" = "200" ]; then
        echo "   ‚úÖ Status: $http_code (OK)"
        if echo "$body" | jq . > /dev/null 2>&1; then
            echo "   ‚úÖ Response: JSON valide"
            # Afficher un r√©sum√© de la r√©ponse
            if echo "$body" | jq -e '.content[]?' > /dev/null 2>&1; then
                count=$(echo "$body" | jq '.content | length')
                echo "   üìä Nombre d'√©l√©ments: $count"
            elif echo "$body" | jq -e '.[]?' > /dev/null 2>&1; then
                count=$(echo "$body" | jq '. | length')
                echo "   üìä Nombre d'√©l√©ments: $count"
            else
                echo "   üìä R√©ponse: $(echo "$body" | jq -c . | cut -c1-100)..."
            fi
        else
            echo "   ‚ö†Ô∏è  Response: Non-JSON ou vide"
        fi
    else
        echo "   ‚ùå Status: $http_code"
        echo "   üìù Response: $(echo "$body" | head -c 200)"
    fi
    echo
}

# V√©rifier que l'application est en cours d'ex√©cution
echo "üîç V√©rification de l'√©tat de l'application..."
if ! curl -s "$BASE_URL/actuator/health" > /dev/null 2>&1; then
    echo "‚ùå L'application n'est pas accessible √† $BASE_URL"
    echo "   Assurez-vous que l'application Spring Boot est d√©marr√©e avec:"
    echo "   ./mvnw spring-boot:run"
    echo
    exit 1
else
    echo "‚úÖ L'application est accessible"
    echo
fi

# Tests des endpoints principaux
echo "=== TESTS DES ENDPOINTS ==="

# 1. Toutes les activit√©s
test_endpoint "$ACTIVITIES_URL?page=0&size=5" "Obtenir toutes les activit√©s (pagin√©es)"

# 2. Activit√©s r√©centes
test_endpoint "$ACTIVITIES_URL/recent?hours=24" "Activit√©s r√©centes (24h)"

# 3. Statistiques globales
test_endpoint "$ACTIVITIES_URL/stats/count?hours=24" "Statistiques g√©n√©rales"

# 4. Statistiques par type d'entit√©
test_endpoint "$ACTIVITIES_URL/stats/entity-types?hours=24" "Statistiques par type d'entit√©"

# 5. Statistiques par action
test_endpoint "$ACTIVITIES_URL/stats/actions?hours=24" "Statistiques par action"

# 6. Dashboard des activit√©s
test_endpoint "$ACTIVITIES_URL/dashboard?hours=24" "Dashboard des activit√©s"

# 7. Activit√©s CRUD des apprenants
test_endpoint "$ACTIVITIES_URL/crud/apprenants?page=0&size=5" "Activit√©s CRUD des apprenants"

# 8. Activit√©s CRUD des formations
test_endpoint "$ACTIVITIES_URL/crud/formations?page=0&size=5" "Activit√©s CRUD des formations"

# 9. Activit√©s CRUD des paiements
test_endpoint "$ACTIVITIES_URL/crud/paiements?page=0&size=5" "Activit√©s CRUD des paiements"

# 10. Activit√©s CRUD des inscriptions
test_endpoint "$ACTIVITIES_URL/crud/inscriptions?page=0&size=5" "Activit√©s CRUD des inscriptions"

echo "=== R√âSUM√â ==="
echo "‚úÖ Tests des endpoints termin√©s"
echo "üìñ Pour plus de d√©tails, consultez la documentation Swagger √†:"
echo "   http://localhost:8080/api/swagger-ui.html"
echo
echo "üîç Pour g√©n√©rer des activit√©s de test, utilisez les autres endpoints CRUD:"
echo "   - POST $BASE_URL/apprenants (cr√©er un apprenant)"
echo "   - GET  $BASE_URL/apprenants (lister les apprenants)"
echo "   - POST $BASE_URL/formations (cr√©er une formation)"
echo "   - etc."

