package com.example.G_apprenant.service.impl;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.io.InputStream;
import java.io.IOException;
import java.time.LocalDate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.G_apprenant.entity.Apprenant;
import com.example.G_apprenant.exception.ResourceNotFoundException;
import com.example.G_apprenant.repository.ApprenantRepository;
import com.example.G_apprenant.service.ApprenantService;
import com.example.G_apprenant.dto.ApprenantSearchCriteria;
import com.example.G_apprenant.dto.PaginatedResponse;
import com.example.G_apprenant.dto.ImportResult;
// CSV
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

// Excel
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.example.G_apprenant.specification.ApprenantSpecification;

@Service
@Transactional
public class ApprenantServiceImpl implements ApprenantService {
    private final ApprenantRepository repo;

    public ApprenantServiceImpl(ApprenantRepository repo) {
        this.repo = repo;
    }

    // Méthodes existantes
    @Override
    public Apprenant create(Apprenant a) {
        return repo.save(a);
    }

    @Override
    public Apprenant getById(Long id) {
        return repo.findById(id).orElseThrow(() -> 
            new ResourceNotFoundException("Apprenant non trouvé id=" + id));
    }

    @Override
    public List<Apprenant> getAll() {
        return repo.findAllByOrderByDateNowDesc();
    }

    @Override
    public Apprenant update(Long id, Apprenant a) {
        Apprenant exist = getById(id);
        exist.setNom(a.getNom());
        exist.setPrenom(a.getPrenom());
        exist.setEmail(a.getEmail());
        exist.setTelephone(a.getTelephone());
        exist.setAdresse(a.getAdresse());
        exist.setDateNaissance(a.getDateNaissance());
        exist.setCin(a.getCin());
        return repo.save(exist);
    }

    @Override
    public void delete(Long id) {
        Apprenant exist = getById(id);
        repo.delete(exist);
    }

    // Nouvelles méthodes pour pagination et recherche avancée
    @Override
    @Transactional(readOnly = true)
    public Page<Apprenant> searchApprenants(ApprenantSearchCriteria criteria) {
        Specification<Apprenant> spec = ApprenantSpecification.createSpecification(criteria);
        Pageable pageable = PageRequest.of(criteria.getPage(), criteria.getSize(), criteria.getSort());
        return repo.findAll(spec, pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Apprenant> findAllPaginated(Pageable pageable) {
        return repo.findAll(pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public PaginatedResponse<Apprenant> searchApprenantsWithMetadata(ApprenantSearchCriteria criteria) {
        Page<Apprenant> page = searchApprenants(criteria);
        
        PaginatedResponse.PaginationMetadata metadata = new PaginatedResponse.PaginationMetadata(
            page.getNumber(),
            page.getSize(),
            page.getTotalElements(),
            page.getTotalPages()
        );
        
        return new PaginatedResponse<>(page.getContent(), metadata);
    }

    // Méthodes de recherche spécifiques
    @Override
    @Transactional(readOnly = true)
    public List<Apprenant> findByNomContaining(String nom) {
        return repo.findByNomContainingIgnoreCase(nom);
    }

    @Override
    @Transactional(readOnly = true)
    public List<Apprenant> findByEmailContaining(String email) {
        return repo.findByEmailContainingIgnoreCase(email);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Apprenant> findByNomContaining(String nom, Pageable pageable) {
        return repo.findByNomContainingIgnoreCase(nom, pageable);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Apprenant> findByEmailContaining(String email, Pageable pageable) {
        return repo.findByEmailContainingIgnoreCase(email, pageable);
    }

    // Statistiques
    @Override
    @Transactional(readOnly = true)
    public long count() {
        return repo.count();
    }

    @Override
    @Transactional(readOnly = true)
    public long countBySearchCriteria(ApprenantSearchCriteria criteria) {
        Specification<Apprenant> spec = ApprenantSpecification.createSpecification(criteria);
        return repo.count(spec);
    }
}
