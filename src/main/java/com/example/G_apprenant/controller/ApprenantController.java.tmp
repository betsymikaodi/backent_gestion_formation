package com.example.G_apprenant.controller;

import java.util.List;
import java.time.LocalDate;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.example.G_apprenant.entity.Apprenant;
import com.example.G_apprenant.service.ApprenantService;
import com.example.G_apprenant.dto.ApprenantRequest;
import com.example.G_apprenant.dto.ApprenantSearchCriteria;
import com.example.G_apprenant.dto.PaginatedResponse;
import com.example.G_apprenant.dto.ImportResult;
import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/apprenants")
@Tag(name = "Apprenant Management", description = "APIs pour la gestion des apprenants")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:4200", "http://localhost:8081"})
public class ApprenantController {
    private final ApprenantService service;

    public ApprenantController(ApprenantService service) {
        this.service = service;
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Créer un nouvel apprenant")
    public ResponseEntity<Apprenant> create(@Valid @RequestBody ApprenantRequest request) {
        Apprenant apprenant = new Apprenant();
        apprenant.setNom(request.getNom());
        apprenant.setPrenom(request.getPrenom());
        apprenant.setEmail(request.getEmail());
        apprenant.setTelephone(request.getTelephone());
        apprenant.setAdresse(request.getAdresse());
        apprenant.setCin(request.getCin());
        
        if (request.getDateNaissance() != null && !request.getDateNaissance().isEmpty()) {
            apprenant.setDateNaissance(LocalDate.parse(request.getDateNaissance()));
        }
        
        Apprenant savedApprenant = service.create(apprenant);
        return new ResponseEntity<>(savedApprenant, HttpStatus.CREATED);
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Rechercher les apprenants avec pagination et tri")
    public ResponseEntity<PaginatedResponse<Apprenant>> searchApprenants(
            @Parameter(description = "Numéro de la page (commence à 0)") 
            @RequestParam(defaultValue = "0") int page,
            
            @Parameter(description = "Taille de la page (20, 50, 100)") 
            @RequestParam(defaultValue = "20") int size,
            
            @Parameter(description = "Champ de tri (nom, prenom, email, dateNaissance, dateNow)") 
            @RequestParam(defaultValue = "dateNow") String sortBy,
            
            @Parameter(description = "Direction du tri (asc, desc)") 
            @RequestParam(defaultValue = "desc") String sortDirection,
            
            @Parameter(description = "Recherche dans nom, prénom, email") 
            @RequestParam(required = false) String search,
            
            @Parameter(description = "Filtrer par nom") 
            @RequestParam(required = false) String nom,
            
            @Parameter(description = "Filtrer par prénom") 
            @RequestParam(required = false) String prenom,
            
            @Parameter(description = "Filtrer par email") 
            @RequestParam(required = false) String email,
            
            @Parameter(description = "Filtrer par téléphone") 
            @RequestParam(required = false) String telephone,
            
            @Parameter(description = "Filtrer par adresse") 
            @RequestParam(required = false) String adresse,
            
            @Parameter(description = "Filtrer par CIN") 
            @RequestParam(required = false) String cin,
            
            @Parameter(description = "Date de naissance début (yyyy-MM-dd)") 
            @RequestParam(required = false) String dateNaissanceDebut,
            
            @Parameter(description = "Date de naissance fin (yyyy-MM-dd)") 
            @RequestParam(required = false) String dateNaissanceFin,
            
            @Parameter(description = "Statut d'inscription") 
            @RequestParam(required = false) String statutInscription,
            
            @Parameter(description = "ID de formation") 
            @RequestParam(required = false) Long formationId,
            
            @Parameter(description = "Nom de formation") 
            @RequestParam(required = false) String nomFormation
    ) {
        ApprenantSearchCriteria criteria = new ApprenantSearchCriteria();
        criteria.setPage(page);
        criteria.setSize(size);
        criteria.setSortBy(sortBy);
        criteria.setSortDirection(sortDirection);
        criteria.setSearchTerm(search);
        criteria.setNom(nom);
        criteria.setPrenom(prenom);
        criteria.setEmail(email);
        criteria.setTelephone(telephone);
        criteria.setAdresse(adresse);
        criteria.setCin(cin);
        criteria.setStatutInscription(statutInscription);
        criteria.setFormationId(formationId);
        criteria.setNomFormation(nomFormation);
        
        // Gestion des dates
        if (dateNaissanceDebut != null && !dateNaissanceDebut.isEmpty()) {
            criteria.setDateNaissanceDebut(LocalDate.parse(dateNaissanceDebut));
        }
        if (dateNaissanceFin != null && !dateNaissanceFin.isEmpty()) {
            criteria.setDateNaissanceFin(LocalDate.parse(dateNaissanceFin));
        }
        
        PaginatedResponse<Apprenant> response = service.searchApprenantsWithMetadata(criteria);
        return ResponseEntity.ok(response);
    }

    @GetMapping(value = "/all", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Obtenir tous les apprenants (sans pagination)")
    public ResponseEntity<List<Apprenant>> getAll() {
        return ResponseEntity.ok(service.getAll());
    }

    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Obtenir un apprenant par ID")
    public ResponseEntity<Apprenant> getById(
            @Parameter(description = "ID de l'apprenant")
            @PathVariable Long id) {
        return ResponseEntity.ok(service.getById(id));
    }

    @PutMapping(value = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Mettre à jour un apprenant")
    public ResponseEntity<Apprenant> update(
            @Parameter(description = "ID de l'apprenant")
            @PathVariable Long id,
            @Valid @RequestBody ApprenantRequest request) {
        Apprenant apprenant = new Apprenant();
        apprenant.setNom(request.getNom());
        apprenant.setPrenom(request.getPrenom());
        apprenant.setEmail(request.getEmail());
        apprenant.setTelephone(request.getTelephone());
        apprenant.setAdresse(request.getAdresse());
        apprenant.setCin(request.getCin());
        if (request.getDateNaissance() != null && !request.getDateNaissance().isEmpty()) {
            apprenant.setDateNaissance(LocalDate.parse(request.getDateNaissance()));
        }
        return ResponseEntity.ok(service.update(id, apprenant));
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Supprimer un apprenant")
    public ResponseEntity<?> delete(
            @Parameter(description = "ID de l'apprenant")
            @PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping(value = "/search/nom", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Rechercher par nom (recherche simple)")
    public ResponseEntity<List<Apprenant>> searchByNom(
            @Parameter(description = "Nom à rechercher")
            @RequestParam String nom) {
        return ResponseEntity.ok(service.findByNomContaining(nom));
    }

    @GetMapping(value = "/search/email", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Rechercher par email (recherche simple)")
    public ResponseEntity<List<Apprenant>> searchByEmail(
            @Parameter(description = "Email à rechercher")
            @RequestParam String email) {
        return ResponseEntity.ok(service.findByEmailContaining(email));
    }

    @GetMapping(value = "/count", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Obtenir le nombre total d'apprenants")
    public ResponseEntity<Long> countApprenants() {
        return ResponseEntity.ok(service.count());
    }

    @GetMapping(value = "/sizes", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Obtenir les tailles de page disponibles")
    public ResponseEntity<List<Integer>> getAvailablePageSizes() {
        return ResponseEntity.ok(List.of(10, 20, 50, 100));
    }

    @GetMapping(value = "/sort-options", produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Obtenir les options de tri disponibles")
    public ResponseEntity<List<String>> getSortOptions() {
        return ResponseEntity.ok(List.of("nom", "prenom", "email", "telephone", "dateNaissance", "dateNow"));
    }

    @PostMapping(value = "/import", consumes = MediaType.MULTIPART_FORM_DATA_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Importer des apprenants via CSV ou Excel")
    public ResponseEntity<ImportResult> importApprenants(@RequestPart("file") MultipartFile file) {
        try {
            ImportResult result = service.importApprenants(file.getInputStream(), file.getOriginalFilename());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            ImportResult err = new ImportResult();
            err.addError(0, "Erreur lors de limport:
